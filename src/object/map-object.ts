/**
 * Creates a new object with the same keys as the given object,
 * and values generated by running each own enumerable string keyed property of
 * the object thru the function.
 *
 * @param {Object.<string, Value>} object - The object to iterate over.
 * @param {(value: Value) => Returned} fn - The function invoked per
 * iteration.
 * @returns {Object.<string, Returned>} The new object with the same keys and
 * mapped values.
 *
 * @template Value The type of the values in the input object.
 * @template Returned The type of the values in the returned object.
 *
 * @example
 * ```typescript
 * const object = { a: 1, b: 2 }
 * const fn = (value) => value * 2
 * mapObject(object, fn)
 * // returns { a: 2, b: 4 }
 * ```
 */
export function mapObject<
  Obj extends Record<string, unknown>,
  Value extends Obj[keyof Obj],
  Returned,
  Result extends { [k in keyof Obj]: Returned },
>(
  object: Obj,
  fn: (value: Value) => Returned,
): Result {
  return Object.fromEntries(
    Object.entries(object).map(([key, value]) => [key, fn(value as Value)]),
  ) as Result
}
